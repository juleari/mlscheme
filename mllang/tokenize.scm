(define TAB 4)
(define TAB1 (- TAB 1))

(define-syntax ++
  (syntax-rules ()
    ((_ x)  (set! x (+ x 1)))
    ((_ x y)(set! x (+ x y)))))

(define kw '(scheme mod div if zero? eval))

(define (get-cut-tag word)
  (assq word '((#\( tag-lprn)
               (#\) tag-rprn)
               (#\[ tag-lbrk)
               (#\] tag-rbrk)
               (#\{ tag-lbrc)
               (#\} tag-rbrc)
               (#\. tag-dot)
               (#\: tag-cln))))

(define (sym-or-new-tag? word)
  (assq word '((#\\ tag-lmbd)
               (#\< tag-lwr)
               (#\+ tag-pls)
               (#\* tag-mul)
               (#\/ tag-div)
               (#\! tag-not))))

(define (sym-old-or-new-tag? word)
  (assq word '((#\- ((tag-sym  tag-sym)
                     (tag-lwr  tag-to)
                     (#f       tag-mns)))
               (#\> ((tag-sym  tag-sym)
                     (tag-mns  tag-from)
                     (#f       tag-hghr)))
               (#\| ((tag-sym  tag-sym)
                     (tag-lor  tag-or)
                     (#f       tag-lor)))
               (#&  ((tag-sym  tag-sym)
                     (tag-land tag-and)
                     (#f       tag-land)))
               (#\= ((tag-sym  tag-sym)
                     (tag-lwr  tag-leq)
                     (tag-hghr tag-heq)
                     (tag-not  tag-neq)
                     (#f       tag-eq))))))

(define (neq? a b)
  (not (eq? a b)))

(define (x-not-in-list x xs)
  (or (null? xs)
      (and (neq? x (car xs))
           (x-not-in-list x (cdr xs)))))

(define tokenize
  (let ((line 1)
        (position 1)
        (iscomment #f))
    (lambda (word)
      
      (define (isnum? token)
        (let ((token-word (string->number (cadr token))))
          (and token-word
               (list 'tag-num (car token) token-word))))
      
      (define (isnumber?)
        (let ((token-word (string->number word))
              (ws         (string->list word))
              (coords     (list line position)))
          (and token-word
               ;(x-not-in-list #\/ ws)
               (++ position (length ws))
               (list (list 'tag-num coords token-word)))))
      
      (define (iskw?)
        (define (helper kw w)
          (and (not (null? kw))
               (or (eq? w (car kw))
                   (helper (cdr kw) w))))
        (let ((coords (list line position)))
          (and (helper kw (string->symbol word))
               (++ position (length (string->list word)))
               (list (list 'tag-kw coords word)))))
      
      (define (tag-sym? tag s token)
        (and (eqv? tag 'tag-sym)
             (helper s token tag)))
      
      (define (new-tag? s token old-tag new-tag)
        (and (not old-tag)
             (helper s token new-tag)))
      
      (define (sym-or-new-tag s token old-tag new-tag)
        (or (tag-sym? old-tag s token)
            (new-tag? s token old-tag new-tag)))
      
      (define (sym-old-or-new-tag s token old-tag old-new-tag)
        (or (tag-sym? old-tag s token)
            (let* ((new-tag-assq (assq old-tag old-new-tag))
                   (new-tag      (and new-tag-assq (cadr new-tag-assq))))
              (helper s token new-tag))))
      
      (define (cons-tags tag tag-token token s)
        (let* ((tail (helper s token #f))
               (tag-tail (car tail))
               (head (cons tag tag-token)))
          #|(write tail)
          (newline)|#
          (if (list? tag-tail)
              (if (car tag-tail)
                  (cons head tail)
                  (list head))
              (if tag-tail
                  (cons head (list tail))
                  (list head)))))
      
      (define (cut-token-by-word token word)
        (define (helper ws counter)
          (let ((w (car ws))
                (s (cdr ws)))
            (if (eqv? w word)
                (list (list (car token)
                            (list->string (reverse counter)))
                      (list (list line (- position 1)) word)
                      (list (list line position) (list->string s)))
                (helper s (cons w counter)))))
        (helper (string->list (cadr token)) '()))
      
      (define (cut-by-tag w s token old-tag cut-tag)
        (let* ((cuted-list (cut-token-by-word token w))
               (before     (car   cuted-list))
               (center     (cadr  cuted-list))
               (after      (caddr cuted-list)))
          (if old-tag
              (cons (or (isnum? before)
                        (cons old-tag before))
                    (cons-tags cut-tag center after s))
              (cons-tags cut-tag center after s))))
      
      (define (helper ws token tag)
        (if (null? ws)
            (list (cons tag token))
            (let* ((w (car ws))
                   (s (cdr ws))
                   (sont  (sym-or-new-tag? w))
                   (ssont (sym-old-or-new-tag? w))
                   (ctag  (get-cut-tag w)))
              (++ position)
              (cond ((eqv? w #\newline) (and (set! iscomment #f)
                                             (set! position 1)
                                             (++ line)
                                             '()))
                    (iscomment          (and (++ position (length s))
                                             '()))
                    ((eqv? w #\tab)     (and (++ position TAB1)
                                             '()))
                    ((eqv? w #\space)   '())
                    ((eqv? w #\;)       (and (set! iscomment #t)
                                             '()))
                    (sont               (sym-or-new-tag s token tag (cadr sont)))
                    (ssont              (sym-old-or-new-tag s token tag (cadr ssont)))
                    (ctag               (cut-by-tag w s token tag (cadr ctag)))
                    (else               (helper s token 'tag-sym))))))
      
      (or (iskw?)
          (isnumber?)
          (helper (string->list word) (list (list line position) word) #f)))))

(define (trim? s)
  (or (eqv? s #\space)
      (eqv? s #\newline)
      (eqv? s #\tab)))

(define port (open-input-file "/Users/juleari/Desktop/иу9/диплом/examples/sample1.sm"))

(define (tokenize-file file)
  (define (add-word word words)
    (if (null? word)
        words
        (cons (list->string (reverse word)) words)))
  
  (define (read-words word words)
    (let ((ch (read-char file)))
      (or (and (eof-object? ch)
               (add-word word words))
          (and (trim? ch)
               (read-words '() (cons (string ch) (add-word word words))))
          (read-words (cons ch word) words))))
  
  (define (tokenize-words words tokens)
    (if (null? words)
        tokens
        (let ((t (tokenize (car words))))
          (tokenize-words (cdr words) (append tokens t)))))
  
  (tokenize-words (reverse (read-words '() '())) '()))

(define tokens (tokenize-file port))