(define-syntax :eval-i
  (syntax-rules ()
    ((_ x) (eval x (interaction-environment)))))

(define-syntax :map-cond
  (syntax-rules ()
    ((_ ((cond-1 value-1) ...)) (cond (cond-1 value-1) ...))))

(define-syntax :append-s
  (syntax-rules ()
    ((_ (x ...) (y ...)) (append (list x ...) y ...))))

(define-syntax :and-fold-s
  (syntax-rules ()
    ((_ ()) #t)
    ((_ (x)) x)
    ((_ (x y ...)) (and x (:and-fold-s (y ...))))))

(define (:and-fold xs)
  (or (null? xs)
      (and (car xs)
           (:and-fold (cdr xs)))))

(define (:hash f-list a-list)
  (or (null? f-list)
      (and ((:eval-i (car f-list)) (car a-list))
           (:hash (cdr f-list) (cdr a-list)))))

(define (give-first xs n)
  (if (or (zero? n)
          (null? xs))
      '()
      (cons (car xs)
            (give-first xs (- n 1)))))

(define (:not-null? xs) (not (null? xs)))

(define (:multi-list->vector xs ml)
    (define (helper result xs ml)
      (if (list? ml)
          (if (null? ml)
              result
              (if (and (:not-null? ml)
                       (list? (car ml))
                       (:not-null? (car ml))
                       (equal? (caar ml) ':continuous))
                  (if (symbol? (cadar ml))
                      (append result (list xs))
                      (append result (helper '() xs (cdr ml))))
                  (helper (append result (helper '() (car xs) (car ml)))
                          (cdr xs)
                          (cdr ml))))
          (list xs)))
    (list->vector (helper '() xs ml)))

(define (:print x)
  (if (list? x)
      (begin (display "[ ")
             (map :print x)
             (display "] "))
      (begin (display x)
             (display " "))))

(define (print . xs)
  (or (and (not (null? xs))
           (:print (car xs))
           (newline)
           (apply print (cdr xs))
      (newline))))

(define // quotient)
(define % remainder)
(define ** expt)
(define (&& x y) (and x y))
(define (|| x y) (or x y))
(define ++ (lambda :args (if (null? :args)
                             :args
                             (if (string? (car :args))
                                 (apply string-append :args)
                                 (apply append :args)))))

(define :error-func-call "RUNTIME-ERROR: the arguments does not match any types of this function")
