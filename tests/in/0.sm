; count days of week
day-of-week day month year <-
    a <- (14 - month) // 12
    y <- year - a
    m <- month + (a * 12) - 2

    (7000 + day + y + (y // 4) + (y // 400) + (31 * m // 12) 
        - (y // 100)) % 7

; count x in xs
count x []         <- 0
count x [ x : xs ] <- 1 + count x xs
count x [ y : xs ] <- count x xs
;повторные переменные в образцах

count 'a ['a 'b 'c 'a]

replace pred? proc []         <- []
replace pred? proc [ x : xs ] <-  
    if | pred? x -> [ proc x : replace pred? proc xs ]
       |         -> [      x : replace pred? proc xs ]

replace zero? 
        \ x -> x + 1
        [ 0 1 2 3 0 ]

replace odd?
        \ x -> x * 2
        [ 1 2 3 4 5 6 ]

replace \ x -> 0 > x
        exp
        []

replicate x 0 <- []
replicate x n <- [ x : replicate x ( n - 1 ) ]

replicate 'a 5
replicate [ 'a 'b ] 3
replicate 'a 0

cycle xs 0 <- []
cycle xs n <- xs ++ cycle xs ( n - 1 )

cycle [ 0 1 ] 3
cycle [ 'a 'b 'c ] 5
cycle [] 0

and-fold        <- #t
and-fold x : xs <- x && and-fold : xs

and-fold #f #f #f
and-fold #f #f #t
and-fold #f #t #t
and-fold #t #t #t
and-fold

or-fold        <- #f
or-fold x : xs <- x || or-fold : xs

o        <- \ y -> y
o x : xs <- \ y -> ( x o : xs ) y

f x <- x * 2
g x <- x * 3
h x <- - x

(o f g h) 1
o . [ 1 ]

find-number a b c <-
    a <= b &&
    (
        (zero? a div c) && a ||
        find-number (a + 1) b c
    )

find-number 0 5 2
find-number 7 9 3
find-number 3 7 9

eval "a y <- \ x -> y + x\n" +
     "a f"
     { f <- 4 }

scheme (define (b x) (+ 1 x))
scheme (+ 5 (b 7))

c <- [ a.[5 3] b.[6] 8 10 [1 2 3] "sova" ]

func . args