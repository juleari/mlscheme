(define (n! . :args) 
  (:map-cond (((and ((lambda (:x) (= :x 1)) (length :args))
                    (:hash (quote ((lambda (x) (eqv? x 0)))) :args)
                    ((lambda :args #t) :args))
               (apply (lambda (:g_) (begin 1)) :args))
              ((and ((lambda (:x) (= :x 1)) (length :args))
                    (:hash (quote ((lambda (x) #t))) :args)
                    ((lambda :args #t) :args))
               (apply (lambda (n) (begin (* n (n! (- n 1))))) :args)))))
(n! 5)
(n! 10)
