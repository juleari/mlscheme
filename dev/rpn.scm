(define (print . xs)
  (or (and (not (null? xs))
           (display (car xs))
           (newline)
           (apply print (cdr xs)))
      (newline)))

(define (calc-rpn xs)
  (define (helper stack xs)
    (if (null? xs)
        (car stack)
        (let ((x (car xs))
              (s (cdr xs)))
          (print x (procedure? x) (procedure? `,x))
          (if (procedure? x)
              (helper (cons (eval `(,x ,(cadr stack) ,(car stack))
                                  (interaction-environment))
                            (cddr stack))
                      s)
              (helper (cons x stack) s)))))
  (helper '() xs))

(define expr '(#(tag-num #(7 6) 7000)
               #(func-decl
                 (#(func-name #(tag-sym #(7 9) "day"))))
               #(tag-pls #(7 7) "+")
               #(func-decl (#(func-name #(tag-sym #(7 15) "y"))))
               #(tag-pls #(7 13) "+")
               #(func-decl (#(func-name #(tag-sym #(7 20) "y"))))
               #(tag-num #(7 25) 4)
               #(tag-div #(7 22) "//")
               #(tag-pls #(7 17) "+")
               #(func-decl (#(func-name #(tag-sym #(7 31) "y"))))
               #(tag-num #(7 36) 400)
               #(tag-div #(7 33) "//")
               #(tag-pls #(7 28) "+")
               #(tag-num #(7 44) 31)
               #(func-decl (#(func-name #(tag-sym #(7 47) "m"))))
               #(tag-mul #(7 45) "*")
               #(tag-num #(7 52) 12)
               #(tag-div #(7 49) "//")
               #(tag-pls #(7 41) "+")
               #(func-decl (#(func-name #(tag-sym #(8 12) "y"))))
               #(tag-num #(8 17) 100)
               #(tag-div #(8 14) "//")
               #(tag-mns #(8 9) "-")
               #(tag-num #(8 25) 7)
               #(tag-mod #(8 23) "%")))

(calc-rpn expr)

;; (procedure? (eval (string->symbol "+") (interaction-environment)))